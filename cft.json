{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to create a VPC with public and private subnets, an ALB, ASG, and RDS instances",
  "Parameters": {
    "EnvironmentName": {
      "Type": "String",
      "Description": "The name of the environment"
    },
    "VpcCidr": {
      "Type": "String",
      "Description": "The VPC CIDR block",
      "Default": "10.0.0.0/16"
    },
    "PublicSubnet1CIDRBlock": {
      "Type": "String",
      "Description": "The CIDR block for Public Subnet 1",
      "Default": "10.0.1.0/24"
    },
    "PublicSubnet2CIDRBlock": {
      "Type": "String",
      "Description": "The CIDR block for Public Subnet 2",
      "Default": "10.0.8.0/24"
    },
    "PrivateSubnet1CIDRBlock": {
      "Type": "String",
      "Description": "The CIDR block for Private Subnet 1",
      "Default": "10.0.9.0/24"
    },
    "PrivateSubnet2CIDRBlock": {
      "Type": "String",
      "Description": "The CIDR block for Private Subnet 2",
      "Default": "10.0.4.0/24"
    },
    "InstanceType": {
      "Type": "String",
      "Description": "EC2 instance type for the Auto Scaling group",
      "Default": "t2.micro"
    },
    "RdsInstanceClassType": {
      "Type": "String",
      "Description": "RDS instance class for the DB instances",
      "Default": "db.t3.micro"
    },
    "ParameterGroupFamily": {
      "Type": "String",
      "Description": "RDS DB Parameter Group Family (postgres13)",
      "Default": "postgres13"
    },
    "RDSDBName": {
      "Type": "String",
      "Description": "RDS Database Name",
      "Default": "ubix"
    },
    "MasterUsername": {
      "Type": "String",
      "Description": "Manually specify the RDS DB username",
      "Default": "usernamemaster"
    },
    "MasterUserPassword": {
      "Type": "String",
      "Description": "Manually specify the RDS DB password",
      "Default": "password1234"
    },
    "Ami": {
      "Type": "String",
      "Description": "AMI ID for the EC2 instances",
      "Default": "ami-09b0a86a2c84101e1"
    },
    "RDSDBInstanceEngine": {
      "Type": "String",
      "Description": "The database engine for the RDS instance",
      "Default": "postgres"
    },
    "CidrIpAddress": {
      "Type": "String",
      "Default": "0.0.0.0/0",
      "Description": "The CIDR IP range for SSH access of the security group"
    },
    "RDSBackupRetentionPeriod": {
      "Type": "Number",
      "Description": "Backup retention period for RDS (in days)",
      "Default": "7"
    },
    "RDSSecretManagerDBCredentials": {
      "Type": "String",
      "Description": "RDS SecretManager secrets stored in SecretManager",
      "Default": "RDS_Secret_cloudformation"
    },
    "DbAllocatedStorage": {
      "Type": "Number",
      "Description": "The size of the database (in GiB)",
      "Default": "50"
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidr"
        },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} VPC"
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "EnvironmentName"
            }
          }
        ]
      }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet1CIDRBlock"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Subnet (AZ1)"
            }
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet2CIDRBlock"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Subnet (AZ2)"
            }
          }
        ]
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet1CIDRBlock"
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Private Subnet (AZ1)"
            }
          }
        ]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet2CIDRBlock"
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Private Subnet (AZ2)"
            }
          }
        ]
      }
    },
    "NatGateway1EIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NatGateway1": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatGateway1EIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Routes"
            }
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Private Routes"
            }
          }
        ]
      }
    },
    "PrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway1"
        }
      }
    },
    "EC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for ASG",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": {
              "Ref": "CidrIpAddress"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": {
              "Ref": "CidrIpAddress"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": {
              "Ref": "CidrIpAddress"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{EnvironmentName} Sg"
          }
        ]
      }
    },
    "ApploadbalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow HTTP traffic to ALB",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{EnvironmentName} SG"
          }
        ]
      }
    },
    "Apploadbalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "IpAddressType": "ipv4",
        "Name": {
          "Fn::Sub": "${EnvironmentName}-ALB"
        },
        "Scheme": "internet-facing",
        "Type": "application",
        "SecurityGroups": [
          {
            "Ref": "ApploadbalancerSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          }
        ],
        "LoadBalancerAttributes": [
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": "60"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "UBIX-cloudformation-alb"
          }
        ]
      }
    },
    "AlbTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "DependsOn": "Apploadbalancer",
      "Properties": {
        "Name": {
          "Fn::Sub": "${EnvironmentName}-ALB-TG"
        },
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "VpcId": {
          "Ref": "VPC"
        },
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckPath": "/",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 2,
        "Matcher": {
          "HttpCode": "200"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} lb-target-group"
            }
          }
        ]
      }
    },
    "ALoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "DependsOn": "Apploadbalancer",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "Apploadbalancer"
        },
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "AlbTargetGroup"
            }
          }
        ],
        "Port": 80,
        "Protocol": "HTTP",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} alb-listener"
            }
          }
        ]
      }
    },
    "LaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateName": {
          "Fn::Sub": "${EnvironmentName}-LaunchTemplate"
        },
        "LaunchTemplateData": {
          "ImageId": {
            "Ref": "Ami"
          },
          "InstanceType": {
            "Ref": "InstanceType"
          },
          "SecurityGroupIds": [
            {
              "Ref": "EC2SecurityGroup"
            }
          ],
        "UserData": {
            "Fn::Base64": {
                "Fn::Join": [
                    "\n",
                    [
                        "#!/bin/bash",
                        "apt-get update -y",
                        "apt-get install -y nginx",
                        "systemctl start nginx",
                        "systemctl enable nginx",
                        "echo \"Hello from $(hostname -f)\" > /var/www/html/index.html"
                    ]
                ]
            }
        },
        "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Fn::Sub": "${EnvironmentName} MyInstance"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "LaunchTemplate"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "PrivateSubnet1"
          },
          {
            "Ref": "PrivateSubnet2"
          }
        ],
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "LaunchTemplate"
          },
          "Version": {
            "Fn::GetAtt": [
              "LaunchTemplate",
              "LatestVersionNumber"
            ]
          }
        },
        "MinSize": "1",
        "MaxSize": "3",
        "DesiredCapacity": "2",
        "TargetGroupARNs": [
          {
            "Ref": "AlbTargetGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName}-asg"
            },
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "RDSDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupName": "ubi-rds-subnetgroup",
        "DBSubnetGroupDescription": {
          "Fn::Sub": "${EnvironmentName} RDS subnet group"
        },
        "SubnetIds": [
          {
            "Ref": "PrivateSubnet1"
          },
          {
            "Ref": "PrivateSubnet2"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName}-rds-sng"
            }
          }
        ]
      }
    },
    "RDSSecret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": "RDSSecretManagerDBcreditinals",
        "Description": "Secret to store RDS DB username and password",
        "SecretString": "{\"username\": \"${MasterUsername}\", \"password\": \"${MasterUserPassword}\"}"
      }
    },
    "RDSDBInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBInstanceClass": {
          "Ref": "RdsInstanceClassType"
        },
        "Engine": {
          "Ref": "RDSDBInstanceEngine"
        },
        "DBName": {
          "Ref": "RDSDBName"
        },
        "MasterUsername": {
          "Ref": "MasterUsername"
        },
        "MasterUserPassword": {
          "Ref": "MasterUserPassword"
        },
        "AllocatedStorage": {
          "Ref": "DbAllocatedStorage"
        },
        "BackupRetentionPeriod": {
          "Ref": "RDSBackupRetentionPeriod"
        },
        "DBParameterGroupName": {
          "Ref": "DBParameterGroup"
        },
        "DBSubnetGroupName": {
          "Ref": "RDSDBSubnetGroup"
        },
        "PubliclyAccessible": false,
        "StorageEncrypted": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} RDS DB Instance"
            }
          }
        ]
      }
    },
    "DBParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties": {
        "Description": "Parameter group for logging",
        "Family": "postgres16",
        "Parameters": {
          "max_connections": "500",
          "shared_buffers": "524288"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName}-DB-PG"
            }
          }
        ]
      }
    },
    "DBReplica": {
      "Type": "AWS::RDS::DBInstance",
      "DependsOn": "RDSDBInstance",
      "Properties": {
        "SourceDBInstanceIdentifier": {
          "Ref": "RDSDBInstance"
        },
        "DBInstanceClass": "db.t3.micro",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "BackupRetentionPeriod": {
          "Ref": "RDSBackupRetentionPeriod"
        },
        "PubliclyAccessible": false,
        "DBParameterGroupName": {
          "Ref": "DBParameterGroup"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} RDS Replica"
            }
          }
        ]
      }
    },
    "RDSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to RDS",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": {
              "Ref": "CidrIpAddress"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName}-RDS-SG1"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "VPCId": {
      "Description": "The ID of the created VPC",
      "Value": {
        "Ref": "VPC"
      }
    },
    "PublicSubnet1Id": {
      "Description": "The ID of the first public subnet",
      "Value": {
        "Ref": "PublicSubnet1"
      }
    },
    "PublicSubnet2Id": {
      "Description": "The ID of the second public subnet",
      "Value": {
        "Ref": "PublicSubnet2"
      }
    },
    "PrivateSubnet1Id": {
      "Description": "The ID of the first private subnet",
      "Value": {
        "Ref": "PrivateSubnet1"
      }
    },
    "PrivateSubnet2Id": {
      "Description": "The ID of the second private subnet",
      "Value": {
        "Ref": "PrivateSubnet2"
      }
    },
    "InternetGatewayId": {
      "Description": "The ID of the Internet Gateway",
      "Value": {
        "Ref": "InternetGateway"
      }
    },
    "NatGatewayId": {
      "Description": "The ID of the NAT Gateway",
      "Value": {
        "Ref": "NatGateway1"
      }
    },
    "LaunchTemplateId": {
      "Description": "The ID of the EC2 Launch Template",
      "Value": {
        "Ref": "LaunchTemplate"
      }
    },
    "AutoScalingGroupName": {
      "Description": "The name of the Auto Scaling Group",
      "Value": {
        "Ref": "AutoScalingGroup"
      }
    },
    "ApploadbalancerArn": {
      "Description": "The ARN of the Application Load Balancer",
      "Value": {
        "Fn::GetAtt": [
          "Apploadbalancer",
          "LoadBalancerArn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-LoadBalancerArn"
        }
      }
    },
    "ALoadBalancerListenerArn": {
      "Description": "ARN of the Application Load Balancer Listener",
      "Value": {
        "Fn::GetAtt": [
          "ALoadBalancerListener",
          "ListenerArn"
        ]
      }
    },
    "ApploadbalancerSecurityGroupId": {
      "Description": "Security Group ID for the Application Load Balancer",
      "Value": {
        "Ref": "ApploadbalancerSecurityGroup"
      }
    },
    "RDSDBInstanceEndpoint": {
      "Description": "RDS Instance Endpoint",
      "Value": {
        "Fn::GetAtt": [
          "RDSDBInstance",
          "Endpoint.Address"
        ]
      }
    },
    "RDSSecurityGroup": {
      "Description": "Security Group ID for the RDS Instance",
      "Value": {
        "Ref": "RDSSecurityGroup"
      }
    },
    "DBReplicaEndpoint": {
      "Description": "RDS Read Replica Endpoint",
      "Value": {
        "Fn::GetAtt": [
          "DBReplica",
          "Endpoint.Address"
        ]
      }
    },
    "AlbTargetGroupArn": {
      "Description": "Target Group ARN for the Application Load Balancer",
      "Value": {
        "Ref": "AlbTargetGroup"
      }
    },
    "RDSSecretARN": {
      "Description": "ARN of the RDS Secret in Secrets Manager",
      "Value": {
        "Ref": "RDSSecret"
      }
    }
  }
}