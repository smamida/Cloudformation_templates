AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template to create a VPC with public and private subnets, an ALB, ASG, and RDS instances'

Parameters:
  EnvironmentName:
    Type: String
    Default: 'Ubi-x-cloudformation'
    Description: 'Specifies the environment name for the resources (e.g., dev, test, prod).'

  Cidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'Defines the CIDR block range for the VPC, used to assign IP addresses to resources.'
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$'
    

  PublicSubnet1CIDRBlock:
    Type: String
    Default: '10.0.1.0/24'
    Description: 'The CIDR block for the first public subnet in the VPC.'
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$'

  PublicSubnet2CIDRBlock:
    Type: String
    Default: '10.0.2.0/24'
    Description: 'The CIDR block for the second public subnet in the VPC.'
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$'

  PrivateSubnet1CIDRBlock:
    Type: String
    Default: '10.0.3.0/24'
    Description: 'The CIDR block for the first private subnet in the VPC.'
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$'
    ConstraintDescription: 'The value must be a valid CIDR block.'

  PrivateSubnet2CIDRBlock:
    Type: String
    Default: '10.0.4.0/24'
    Description: 'The CIDR block for the second private subnet in the VPC.'
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$'
    ConstraintDescription: 'The value must be a valid CIDR block.'

  InstanceType:
    Type: String
    Default: 't2.micro'
    Description: 'Specifies the EC2 instance type for the Auto Scaling group.'
 

  InstanceClassType:
    Type: String
    Default: 'db.t3.micro'
    Description: 'Specifies the RDS instance class type for database instances.'
   

  InstanceEngine:
    Type: String
    Default: 'postgres'
    Description: 'Defines the engine for the RDS database instance.'
    



  DBParameterGroupFamily:
    Type: String
    Default: 'postgres16'
    Description: 'The family for the RDS DB Parameter Group (postgres16).'
 


  RDSDBName:
    Type: String
    Default: 'ubix'
    Description: 'The name of the database for the RDS instance.'

  MasterUsername:
    Type: String
    Default: 'administrator'
    Description: 'Specifies the RDS database master username .'

  MasterUserPassword:
    Type: String
    Default: 'password1234'
    Description: 'Specifies the RDS database master password.'

  Ami:
    Type: AWS::EC2::Image::Id
    Description: 'The Amazon Machine Image (AMI) ID used for the EC2 instances.'
    Default: 'ami-09b0a86a2c84101e1'

  Environment:
    Type: String
    Default: 'dev'
    Description: 'Specifies the environment  for the deployed resources(e.g., dev, test, prod).'
    

  CidrIpAddress:
    Type: String
    Default: '0.0.0.0/0'
    Description: 'Specifies the CIDR IP range for security group SSH access.'

  BackupRetentionPeriod:
    Type: String
    Default: '7'
    Description: 'Defines the number of days to retain backups for the RDS instance.'

  SecretDB:
    Type: String
    Default: 'RDS_Secret_cloudformation'
    Description: 'The name of the secret in AWS Secrets Manager storing RDS credentials.'

  AllocatedStorage:
    Type: String
    Default: '50'
    Description: 'Specifies the allocated storage size for the RDS database (in GiB).'

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref Cidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} VPC'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Gateway' 

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn: InternetGateway
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDRBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDRBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ2)'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDRBlock
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ1)'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDRBlock
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ2)'

  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: NatGateway1EIP
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: InternetGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes'

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for ASG'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CidrIpAddress
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CidrIpAddress
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: !Ref CidrIpAddress

      Tags:
        - Key: Name
          Value: !Sub '{EnvironmentName} Ec2Securitgroup'

  AlbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CidrIpAddress
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CidrIpAddress
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: !Ref CidrIpAddress
      Tags:
        - Key: Name
          Value: !Sub '{EnvironmentName} ALB-SecurityGroup'



  Apploadbalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn: InternetGatewayAttachment
    Properties:
      IpAddressType: ipv4
      Name: !Sub '${EnvironmentName}-ALB'
      Scheme: 'internet-facing'
      Type: 'application'
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: 'Name'
          Value: 'UBIX-cloudformation-ApplicationLoadBalancer'

  AlbTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: Apploadbalancer
    Properties:
      Name: !Sub '${EnvironmentName}-ALB-TG'
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
     # HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Tags:
        - Key: 'Name'
          Value: !Sub '${EnvironmentName} AlbTargetGroup'

  ALoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn: Apploadbalancer
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup
      LoadBalancerArn: !Ref Apploadbalancer
      Port: 80
      Protocol: HTTP

      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} ALBListener'


  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${EnvironmentName}-Lt'
      LaunchTemplateData:
        ImageId: !Ref Ami
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData: 
           Fn::Base64: !Sub |
             #!/bin/bash
              sudo apt update -y
              sudo apt install -y nginx
              sudo mkdir -p /usr/share/nginx/html
              echo "Welcome to Nginx! Health check is OK." | sudo tee /usr/share/nginx/html/Health
              sudo service nginx restart
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${EnvironmentName} EC2Instance'

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Sub '${EnvironmentName}-ASG'
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '2'
      MaxSize: '2'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref AlbTargetGroup
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Ec2AutoScalingGroup'
          PropagateAtLaunch: true

  RDSDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: !Sub '${EnvironmentName}-rds-subngroup1'
      DBSubnetGroupDescription: !Sub '${EnvironmentName} RDS subnet group'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-SubnetGrouping'

  RDSSecretManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref SecretDB
      Description: "Secret to store RDS DB username and password"
      SecretString: 
        Fn::Sub: |
          {
            "username": "${MasterUsername}",
            "password": "${MasterUserPassword}"
          }
    
  RDSDBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      DBInstanceClass: !Ref InstanceClassType
      Engine: !Ref InstanceEngine
      DBName: !Ref RDSDBName
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      AllocatedStorage: !Ref AllocatedStorage
      StorageEncrypted: true
      AvailabilityZone: 
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      VPCSecurityGroups: [!Ref RDSSecurityGroup]
      PubliclyAccessible: false
      DBParameterGroupName: !Ref DBParameterGroupFamily           
      Tags:
        - Key: 'Name'
          Value: !Sub '${EnvironmentName}-DB-INS'
  DBReplica:
    Type: 'AWS::RDS::DBInstance'
    DependsOn: RDSDBInstance
    Properties:
      SourceDBInstanceIdentifier: !Ref RDSDBInstance
      DBInstanceIdentifier: 'db-replica'
      DBInstanceClass: 'db.t3.micro'
      AvailabilityZone: 
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
      VPCSecurityGroups: [!Ref RDSSecurityGroup]
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      PubliclyAccessible: false
      DBParameterGroupName: !Ref DBParameterGroupFamily                
      Tags:
        - Key: 'Name'
          Value: !Sub '${EnvironmentName}-Rds Replica'
      
  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access to RDS'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref CidrIpAddress
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-RDS-SecurityGroup'

  # EC2ECRAccessRole IAM Role
  EC2ECRAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2ECRAccessRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  # EC2ECRPullPolicy IAM Policy
  EC2ECRPullPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: EC2ECRPullPolicy
      Description: Policy to allow EC2 to pull images from ECR
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Resource: "*"

  # Attach ECR Pull Policy to Role
  AttachECRPullPolicyToRole:
    Type: AWS::IAM::RolePolicyAttachment
    Properties:
      RoleName: !Ref EC2ECRAccessRole
      PolicyArn: !Ref EC2ECRPullPolicy

  # Attach SSM Policy to Role
  AttachSSMPolicyToRole:
    Type: AWS::IAM::RolePolicyAttachment
    Properties:
      RoleName: !Ref EC2ECRAccessRole
      PolicyArn: arn:aws:iam::aws:policy/AmazonSSMFullAccess

  # EC2 Instance Profile for ECR
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EC2ECRInstanceProfile
      Roles:
        - !Ref EC2ECRAccessRole

  # EC2S3AccessRole IAM Role
  EC2S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2S3AccessRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  # Attach SSM Policy to Airflow Role
  AttachSSMPolicyToRoleAirflow:
    Type: AWS::IAM::RolePolicyAttachment
    Properties:
      RoleName: !Ref EC2S3AccessRole
      PolicyArn: arn:aws:iam::aws:policy/AmazonSSMFullAccess

  # S3 Get Policy
  S3GetPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: S3GetPolicy
      Description: Policy to allow EC2 to get file from S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: "*"

  # Attach S3 Get Policy to Role
  AttachS3GetPolicyToRole:
    Type: AWS::IAM::RolePolicyAttachment
    Properties:
      RoleName: !Ref EC2S3AccessRole
      PolicyArn: !Ref S3GetPolicy

  # EC2 Instance Profile for Airflow
  AirflowEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EC2S3InstanceProfile
      Roles:
        - !Ref EC2S3AccessRole
    # EC2InstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - !Ref EC2InstanceRole

  # EC2 Instance
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref Ami  # Replace with a valid AMI ID
      IamInstanceProfile: !Ref AirflowEC2InstanceProfile
      #KeyName:  
      SecurityGroupIds:
        - !Ref MySecurityGroup
      SubnetId: !Ref PublicSubnet1  # Replace with your subnet ID

  # Security Group for EC2
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0



  #######################################
  # # IAM Role for EC2 Instances
  # EC2InstanceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ec2.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Path: /
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore  # Required for SSM agent on EC2

  # # IAM Policy for EC2 
  # EC2CustomPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: EC2CustomPolicy
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - s3:*
  #             - logs:*
  #             - "airflow:ListEnvironments",
  #             - "airflow:GetEnvironment",
  #             - "airflow:*"
  #           Resource: "*"
  #     Roles:
  #       - !Ref EC2InstanceRole

  # IAM Role for SSM
  # SSMRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ssm.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Path: /
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AmazonSSMFullAccess

  # # SSM Policy for Automation
  # SSMCustomPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: SSMCustomPolicy
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - ec2:DescribeInstances
  #             - ec2:StartInstances
  #             - ec2:StopInstances
  #           Resource: "*"
  #     Roles:
  #       - !Ref SSMRole

  # # SSM Document
  # SSMDocument:
  #   Type: AWS::SSM::Document
  #   Properties:
  #     DocumentType: Command
  #     Content:
  #       schemaVersion: "2.2"
  #       description: "Run shell commands on EC2 instance"
  #       mainSteps:
  #         - action: aws:runShellScript
  #           name: "runShellScript"
  #           inputs:
  #             runCommand:
  #               - "echo Hello, World!"
  #               - "sudo yum update -y"

  # # EC2 Instance Profile

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref MyEC2Instance
    
  # SSMDocumentName:
  #   Description: Name of the SSM document
  #   Value: !Ref SSMDocument

  VPCId:
    Description: 'The ID of the created VPC'
    Value: !Ref VPC

  PublicSubnet1Id:
    Description: 'The ID of the first public subnet'
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: 'The ID of the second public subnet'
    Value: !Ref PublicSubnet2

  PrivateSubnet1Id:
    Description: 'The ID of the first private subnet'
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: 'The ID of the second private subnet'
    Value: !Ref PrivateSubnet2

  InternetGatewayId:
    Description: 'The ID of the Internet Gateway'
    Value: !Ref InternetGateway

  NatGatewayId:
    Description: 'The ID of the NAT Gateway'
    Value: !Ref NatGateway1

  LaunchTemplateId:
    Description: 'The ID of the EC2 Launch Template'
    Value: !Ref LaunchTemplate

  AutoScalingGroupName:
    Description: 'The name of the Auto Scaling Group'
    Value: !Ref AutoScalingGroup

  ApploadbalancerArn:
    Description: 'The ARN of the Application Load Balancer'
    Value: !Ref Apploadbalancer

  AlbSecurityGroupId:
    Description: 'The ID of the ALB security group'
    Value: !Ref AlbSecurityGroup

  AlbTargetGroupArn:
    Description: 'The ARN of the ALB Target Group'
    Value: !Ref AlbTargetGroup

  ALoadBalancerListenerArn:
    Description: 'The ARN of the ALB Listener'
    Value: !Ref ALoadBalancerListener

  RDSInstanceEndpoint:
    Description: 'The endpoint of the RDS DB instance'
    Value: !GetAtt RDSDBInstance.Endpoint.Address

  RDSReplicaEndpoint:
    Description: 'The endpoint of the RDS DB replica'
    Value: !GetAtt DBReplica.Endpoint.Address

  RDSSecurityGroupId:
    Description: 'The ID of the RDS security group'
    Value: !Ref RDSSecurityGroup
  
  RDSSecretARN:
    Description: "ARN of the secret storing RDS credentials"
    Value: !Ref SecretDB
